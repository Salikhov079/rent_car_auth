// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: borrow.proto

package genprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BorrowService_Create_FullMethodName  = "/protos.BorrowService/Create"
	BorrowService_Delete_FullMethodName  = "/protos.BorrowService/Delete"
	BorrowService_Update_FullMethodName  = "/protos.BorrowService/Update"
	BorrowService_GetById_FullMethodName = "/protos.BorrowService/GetById"
	BorrowService_GetAll_FullMethodName  = "/protos.BorrowService/GetAll"
)

// BorrowServiceClient is the client API for BorrowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BorrowServiceClient interface {
	Create(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Borrow, error)
	GetAll(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*GetAllBorrows, error)
}

type borrowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBorrowServiceClient(cc grpc.ClientConnInterface) BorrowServiceClient {
	return &borrowServiceClient{cc}
}

func (c *borrowServiceClient) Create(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) Update(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, BorrowService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Borrow, error) {
	out := new(Borrow)
	err := c.cc.Invoke(ctx, BorrowService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *borrowServiceClient) GetAll(ctx context.Context, in *Borrow, opts ...grpc.CallOption) (*GetAllBorrows, error) {
	out := new(GetAllBorrows)
	err := c.cc.Invoke(ctx, BorrowService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BorrowServiceServer is the server API for BorrowService service.
// All implementations must embed UnimplementedBorrowServiceServer
// for forward compatibility
type BorrowServiceServer interface {
	Create(context.Context, *Borrow) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	Update(context.Context, *Borrow) (*Void, error)
	GetById(context.Context, *ById) (*Borrow, error)
	GetAll(context.Context, *Borrow) (*GetAllBorrows, error)
	mustEmbedUnimplementedBorrowServiceServer()
}

// UnimplementedBorrowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBorrowServiceServer struct {
}

func (UnimplementedBorrowServiceServer) Create(context.Context, *Borrow) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBorrowServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBorrowServiceServer) Update(context.Context, *Borrow) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBorrowServiceServer) GetById(context.Context, *ById) (*Borrow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedBorrowServiceServer) GetAll(context.Context, *Borrow) (*GetAllBorrows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedBorrowServiceServer) mustEmbedUnimplementedBorrowServiceServer() {}

// UnsafeBorrowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BorrowServiceServer will
// result in compilation errors.
type UnsafeBorrowServiceServer interface {
	mustEmbedUnimplementedBorrowServiceServer()
}

func RegisterBorrowServiceServer(s grpc.ServiceRegistrar, srv BorrowServiceServer) {
	s.RegisterService(&BorrowService_ServiceDesc, srv)
}

func _BorrowService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Borrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).Create(ctx, req.(*Borrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Borrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).Update(ctx, req.(*Borrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _BorrowService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Borrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BorrowServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BorrowService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BorrowServiceServer).GetAll(ctx, req.(*Borrow))
	}
	return interceptor(ctx, in, info, handler)
}

// BorrowService_ServiceDesc is the grpc.ServiceDesc for BorrowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BorrowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.BorrowService",
	HandlerType: (*BorrowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BorrowService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BorrowService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _BorrowService_Update_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _BorrowService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _BorrowService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "borrow.proto",
}
